################
YOUR INFO
################
Name1: Sophie Khounlo
EID1: svk297
CS login: sophiek
Email: s.khounlo@utexas.edu
Unique Number: 53015

Slip days used: 0

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1: Dara Cline
EID1: dyc257
CS login: dara
Email: arad1307@utexas.edu
Unique Number: 53005

Your partner's ranking (scale below):

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.
  
  Part 2 of the project was not completed. 

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.
  
  http://www.eskimo.com/~scs/cclass/notes/sx8.html


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.
      
      15 child processes are created.
      0 -
      1 - 1
      2 - 0
      3 - 1
      4 - 1
      5 - 1
      6 - 1
      7 - 0
      8 - 1
      9 - 0
      10 - 1
      11 - 0
      12 - 1
      13 - 1
      14 - 1
      15 - 0

(2) In part 0.3, which flavor of exec did you choose to use?  Why?
    
    We chose to use execve because it returns to the calling program 
    if there is an error like not being able to find the filename.
    If we used on the of the other execs, they would not have returned
    to the original program. 

################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?
  
  sigaction() allows users to specify the signal handling semantics.
  sigaction() was used instead of signal() because the action installed
  remains installed until Signal() is called again with SIG_IGN or
  SIG_DFL. 

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)
  
       call exit 

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?

      .cfi_endproc

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?
     nonlocal jumps

################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.



